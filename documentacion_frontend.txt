DOCUMENTACIÓN DEL CÓDIGO FRONTEND

Este documento proporciona una descripción de alto nivel de los archivos y directorios principales del proyecto frontend, ubicado en `c:\Users\danny\Documents\GitHub\vemat\software\frontend`.

---

### Archivos Raíz

*   `README.md`: Documentación general del proyecto, incluyendo cómo configurar y ejecutar la aplicación.
*   `README - copia.md`: Una copia del archivo README original, posiblemente para propósitos de respaldo o edición.
*   `package.json`: Define los metadatos del proyecto, scripts de ejecución y lista de dependencias de Node.js.
*   `package-lock.json`: Registra las versiones exactas de las dependencias instaladas para asegurar builds consistentes.
*   `Dependencias.txt`: Un archivo de texto que lista las dependencias del proyecto.
*   `.gitignore`: Especifica los archivos y directorios que Git debe ignorar y no incluir en el control de versiones.
*   `eslint.config.js`: Configuración para ESLint, una herramienta de linting que ayuda a mantener la calidad y el estilo del código.
*   `postcss.config.js`: Configuración para PostCSS, utilizado para transformar estilos CSS con plugins de JavaScript.
*   `tailwind.config.js`: Configuración personalizada para Tailwind CSS, un framework CSS utility-first.
*   `vite.config.js`: Configuración para Vite, un bundler y servidor de desarrollo rápido para proyectos web.
*   `index.html`: El archivo HTML principal que sirve como punto de entrada para la aplicación web.

---

### Directorio `dist/` (Salida de Build)

Contiene los archivos optimizados y compilados de la aplicación, listos para ser desplegados en producción.

*   `dist/assets/index-*.css`: Archivos CSS generados y optimizados durante el proceso de build.
*   `dist/assets/index-*.js`: Archivos JavaScript compilados y optimizados durante el proceso de build.
*   `dist/index.html`: La versión de producción del archivo HTML principal, con referencias a los assets optimizados.
*   `dist/vite.svg`: Un icono SVG, probablemente el logo de Vite, incluido en la build final.

---

### Directorio `public/`

Contiene assets estáticos que se sirven directamente sin ser procesados por el bundler.

*   `public/vite.svg`: Un icono SVG, probablemente el logo de Vite, accesible públicamente.

---

### Directorio `src/` (Código Fuente)

Contiene el código fuente principal de la aplicación React.

*   `src/App.jsx`: El componente raíz de la aplicación, que define la estructura general y las rutas de navegación.
*   `src/App.css`: Estilos CSS específicos para el componente `App.jsx`.
*   `src/main.jsx`: El punto de entrada principal de la aplicación, donde se monta el componente `App` en el DOM.
*   `src/index.css`: Estilos CSS globales o base aplicados a toda la aplicación.
*   `src/apiConfig.js`: Archivo de configuración para la API, que puede incluir la URL base del backend.
*   `src/assets/react.svg`: Un icono SVG, probablemente el logo de React.

#### `src/api/`

Módulos para la configuración y gestión de las llamadas a la API.

*   `src/api/axios.js`: Configuración de la instancia de Axios, una librería para realizar peticiones HTTP.
*   `src/api/fetchClient.js`: Un cliente para realizar peticiones HTTP, posiblemente una alternativa o complemento a Axios.

#### `src/components/`

Contiene componentes de React reutilizables que construyen la interfaz de usuario.

*   `AlertHistory.jsx`: Componente para mostrar el historial de alertas.
*   `AuthContext.jsx`: Componente que provee el contexto de autenticación a la aplicación.
*   `BioacusticaChart.jsx`: Componente de gráfico para visualizar datos de bioacústica.
*   `ChartComponent.jsx`: Un componente genérico para renderizar diferentes tipos de gráficos.
*   `ChatInterface.jsx`: Componente de la interfaz de usuario para interactuar con un chat o asistente.
*   `CO2EpiWeekChart.jsx`: Componente de gráfico que muestra los niveles de CO2 por semana epidemiológica.
*   `Co2Icon.jsx`: Un componente de icono relacionado con el dióxido de carbono.
*   `CurrentReadings.jsx`: Componente que muestra las lecturas actuales de los sensores.
*   `Dashboard.jsx`: Componente principal que organiza y muestra varios widgets o datos en un panel.
*   `DeviceLocation.jsx`: Componente para visualizar la ubicación de los dispositivos.
*   `EpiWeekCalendarChart.jsx`: Componente de gráfico de calendario basado en semanas epidemiológicas.
*   `EpiWeekDashboardWidget.jsx`: Un widget para el dashboard que muestra información de semanas epidemiológicas.
*   `EpiWeekSummaryChart.jsx`: Componente de gráfico que resume datos por semana epidemiológica.
*   `EpiWeekSummaryTable.jsx`: Componente de tabla que muestra un resumen de datos por semana epidemiológica.
*   `EpiWeekTable.jsx`: Componente de tabla general para datos organizados por semana epidemiológica.
*   `GaugeDisplay.jsx`: Componente para mostrar valores en un formato de medidor o "gauge".
*   `Header.jsx`: Componente del encabezado de la aplicación, que puede incluir navegación o información de usuario.
*   `HistoryTable.jsx`: Un componente de tabla genérico para mostrar datos históricos.
*   `IAAssistant.jsx`: Componente para la interfaz del asistente de inteligencia artificial.
*   `IAStatusIndicator.jsx`: Componente que indica el estado o la actividad del asistente de IA.

*   `Login.jsx`: Componente de la página de inicio de sesión.
*   `LoginForm.jsx`: Componente del formulario de inicio de sesión.
*   `MainDashboard.jsx`: El componente principal del dashboard.
*   `MapView.jsx`: Componente para mostrar un mapa interactivo.
*   `PromptSelector.jsx`: Componente para seleccionar o gestionar prompts para el asistente de IA.
*   `ReadingsTable.jsx`: Componente de tabla para mostrar lecturas de sensores.
*   `Sidebar.jsx`: Componente de la barra lateral de navegación.
*   `TempHumidityChart.jsx`: Componente de gráfico para visualizar datos de temperatura y humedad.

#### `src/context/`

Contiene los contextos de React para la gestión del estado global de la aplicación.

*   `AuthContext.jsx`: Contexto de React para gestionar el estado de autenticación del usuario.
*   `DashboardContext.jsx`: Contexto de React para compartir datos y estado relacionados con el dashboard.

#### `src/hooks/`

Contiene hooks personalizados de React para encapsular lógica reutilizable.

*   `useErrorHandler.js`: Hook personalizado para manejar y centralizar la lógica de errores.
*   `useIAService.js`: Hook personalizado para interactuar con los servicios del asistente de IA.

#### `src/pages/`

Define los componentes de las páginas principales de la aplicación, que suelen componer varios componentes más pequeños.

*   `AlertHistoryPage.jsx`: Página dedicada a mostrar el historial completo de alertas.
*   `CO2EpiWeekChartPage.jsx`: Página que presenta el gráfico de CO2 por semana epidemiológica.
*   `CurrentReadingsPage.jsx`: Página que muestra las lecturas actuales de los sensores.
*   `EpiWeekSummaryPage.jsx`: Página que ofrece un resumen de datos por semana epidemiológica.
*   `MapViewPage.jsx`: Página que integra la vista de mapa.
*   `ReadingsTablePage.jsxReadingsTablePage.jsx`: Página que muestra una tabla de lecturas (posiblemente un error de nombre o duplicado).
*   `TempHumidityChartPage.jsx`: Página que muestra el gráfico de temperatura y humedad.

#### `src/services/`

Módulos que contienen la lógica de negocio y la interacción con la API para funcionalidades específicas.

*   `alertsService.js`: Servicio para gestionar las operaciones relacionadas con las alertas.
*   `authService.js`: Servicio para manejar la lógica de autenticación de usuarios (login, logout, registro).
*   `readingsService.js`: Servicio para obtener y gestionar los datos de lecturas de sensores.

#### `src/use/`

Contiene hooks personalizados, a menudo relacionados con la obtención de datos o la lógica de negocio específica.

*   `useGetAlertHistory.js`: Hook para obtener el historial de alertas.
*   `useGetBioacustica.js`: Hook para obtener datos de bioacústica.
*   `useGetBioacusticaHistory.js`: Hook para obtener el historial de datos de bioacústica.
*   `useGetReadings.js`: Hook para obtener las lecturas de los sensores.
*   `useLogin.js`: Hook para manejar la lógica de inicio de sesión.

#### `src/utils/`

Contiene funciones de utilidad y helpers que son reutilizables en diferentes partes de la aplicación.

*   `emailConfig.js`: Utilidades para la configuración y el envío de correos electrónicos.
*   `epiWeek.js`: Utilidades para el cálculo y manejo de semanas epidemiológicas.
*   `epiWeekUtils.js`: Utilidades adicionales relacionadas con las semanas epidemiológicas.
*   `generarDatos.js`: Funciones para generar datos, posiblemente para pruebas o datos de ejemplo.
*   `summaryUtils.js`: Utilidades para generar resúmenes de datos.
*   `testEmail.js`: Funciones para probar la funcionalidad de envío de correos electrónicos.